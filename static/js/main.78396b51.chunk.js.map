{"version":3,"sources":["firebase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","props","state","name","author","type","instructions","recipes","handleChange","bind","handleSubmit","database","ref","on","response","newState","val","key","push","id","title","setState","e","this","target","value","preventDefault","dbRef","recipe","className","action","placeholder","onChange","defaultValue","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yTAiBAA,IAASC,cAZY,CACjBC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAOJT,QAAf,EC0GeU,G,wDAnHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,GACNC,OAAQ,GACRC,KAAM,GACNC,aAAc,GACdC,QAAS,IAGX,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAXH,E,gEAeE,IAAD,OACJnB,EAASqB,WAAWC,IAAI,WAChCC,GAAG,SAAS,SAACC,GACjB,IAAMC,EAAW,GAGbR,EAAUO,EAASE,MAGvB,IAAK,IAAIC,KAAOV,EACdQ,EAASG,KAAK,CACZC,GAAIF,EACJd,KAAMI,EAAQU,GAAKG,MACnBhB,OAAQG,EAAQU,GAAKb,OACrBC,KAAME,EAAQU,GAAKZ,KACnBC,aAAcC,EAAQU,GAAKX,eAI/B,EAAKe,SAAS,CACZd,QAASQ,S,mCAKFO,GACXC,KAAKF,SAAL,eACGC,EAAEE,OAAOrB,KAAOmB,EAAEE,OAAOC,U,mCAIjBH,GACXA,EAAEI,iBACF,IAAMC,EAAQrC,EAASqB,WAAWC,IAAI,WAChCgB,EAAS,CACbzB,KAAMoB,KAAKrB,MAAMC,KACjBC,OAAQmB,KAAKrB,MAAME,OACnBC,KAAMkB,KAAKrB,MAAMG,KACjBC,aAAciB,KAAKrB,MAAMI,cAG3BqB,EAAMT,KAAKU,GACXL,KAAKF,SAAS,CACZlB,KAAM,GACNC,OAAQ,GACRC,KAAM,GACNC,aAAc,O,+BAKhB,OACE,yBAAKuB,UAAU,OACb,4DACA,6BAKA,8CACA,0BAAMC,OAAO,GAAGD,UAAU,eACxB,2BACExB,KAAK,OACLF,KAAK,OACL4B,YAAY,aACZC,SAAUT,KAAKf,aACfyB,aAAcV,KAAKrB,MAAMC,OAE3B,2BACEE,KAAK,OACLF,KAAK,SACL4B,YAAY,aACZC,SAAUT,KAAKf,aACfyB,aAAcV,KAAKrB,MAAME,SAE3B,4BACED,KAAK,OACL6B,SAAUT,KAAKf,aACfyB,aAAcV,KAAKrB,MAAMG,MAEvB,4BAAQoB,MAAM,IAAd,YACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,UAAd,WAEJ,8BACEtB,KAAK,eACL4B,YAAY,eACZC,SAAUT,KAAKf,aACfyB,aAAcV,KAAKrB,MAAMI,eAE3B,4BAAQ4B,QAASX,KAAKb,aAAcL,KAAK,UAAzC,oB,GA5GQ8B,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.78396b51.chunk.js","sourcesContent":["// Firebase.js\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n    apiKey: \"AIzaSyBS7-l3QGrrjNOjeBveNuOw43EPLCs64h0\",\n    authDomain: \"projectfive-58123.firebaseapp.com\",\n    databaseURL: \"https://projectfive-58123.firebaseio.com\",\n    projectId: \"projectfive-58123\",\n    storageBucket: \"projectfive-58123.appspot.com\",\n    messagingSenderId: \"685748994816\",\n    appId: \"1:685748994816:web:a5fe6a534909f0bb2069e5\",\n    measurementId: \"G-BHWNHQ6PJN\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n// Export configured version of firebase\nexport default firebase;","// App.js\nimport React, { Component } from 'react';\nimport firebase from './firebase';\nimport './styles/App.scss';\n\n// Step 1: Setup: HTML | SCSS | Firebase\n// Step 2: Rig up input connections\n// Step 3: Research creating objects through user input\n\nclass App extends Component {\n  // Set up Constructor and call Super to establish current state of input properties, as well as an empty recipes array.\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      author: '',\n      type: '',\n      instructions: '',\n      recipes: []\n    }\n    // Create new functions binding 'this' to the object in which the method is called, rather than the global window (necessary because ES6 arrow functions have global rather than local scope).\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  // Connect the application to Firebase to draw info from it furing the componentDidMount stage of the app.\n  componentDidMount() {\n    const dbRef = firebase.database().ref('recipes');\n    dbRef.on('value', (response) => {\n      const newState = [];\n      \n      // Response.val() gives back the parent recipes object containing each recipe child object.\n      let recipes = response.val();\n      \n      // Let the key parameter into the recipes object. This will allow mapping the child recipe objects into an array.\n      for (let key in recipes) {\n        newState.push({\n          id: key,\n          name: recipes[key].title,\n          author: recipes[key].author,\n          type: recipes[key].type,\n          instructions: recipes[key].instructions\n        });\n      }\n\n      this.setState({\n        recipes: newState\n      });\n    });\n  }\n\n  handleChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const dbRef = firebase.database().ref('recipes');\n    const recipe = {\n      name: this.state.name,\n      author: this.state.author,\n      type: this.state.type,\n      instructions: this.state.instructions\n    }\n\n    dbRef.push(recipe);\n    this.setState({\n      name: '',\n      author: '',\n      type: '',\n      instructions: ''\n    });\n  }  \n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>My Database Connection Works</h1>\n        <ul>\n          {/* {this.state.recipes.map(recipe => {\n            return <li>{recipe}</li>;\n          })} */}\n        </ul>\n        <h2>My Recipe Book</h2>\n        <form action=\"\" className=\"recipeEntry\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"recipeName\"\n            onChange={this.handleChange}\n            defaultValue={this.state.name}\n          ></input>\n          <input\n            type=\"text\"\n            name=\"author\"\n            placeholder=\"authorName\"\n            onChange={this.handleChange}\n            defaultValue={this.state.author}\n          ></input>\n          <select \n            name=\"type\"\n            onChange={this.handleChange}\n            defaultValue={this.state.type}\n            >\n              <option value=\"\">Pick One</option>\n              <option value=\"salad\">Salad</option>\n              <option value=\"soup\">Soup</option>\n              <option value=\"desert\">Desert</option>\n            </select>\n          <textarea\n            name=\"instructions\"\n            placeholder=\"instructions\"\n            onChange={this.handleChange}\n            defaultValue={this.state.instructions}\n          ></textarea>\n          <button onClick={this.handleSubmit} type=\"submit\">\n            Add Recipe\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}